generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model address {
  id          Int      @id @default(autoincrement())
  userId      Int
  provinceId  Int
  amphoeId    Int
  tambonId    Int
  addressLine String
  postalCode  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  isDefault   Boolean  @default(false)
  amphoe      amphoe   @relation(fields: [amphoeId], references: [id], map: "Address_amphoeId_fkey")
  province    province @relation(fields: [provinceId], references: [id], map: "Address_provinceId_fkey")
  tambon      tambon   @relation(fields: [tambonId], references: [id], map: "Address_tambonId_fkey")
  user        user     @relation(fields: [userId], references: [id], map: "Address_userId_fkey")

  @@index([amphoeId], map: "Address_amphoeId_fkey")
  @@index([provinceId], map: "Address_provinceId_fkey")
  @@index([tambonId], map: "Address_tambonId_fkey")
  @@index([userId], map: "Address_userId_fkey")
}

model amphoe {
  id          Int       @id @default(autoincrement())
  name_th     String
  name_en     String
  province_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime
  deleted_at  DateTime? @default(now())
  address     address[]
  province    province  @relation(fields: [province_id], references: [id], map: "Amphoe_province_id_fkey")
  tambon      tambon[]

  @@index([province_id], map: "Amphoe_province_id_fkey")
}

model cartitem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  userId    Int
  productId Int
  product   product @relation(fields: [productId], references: [ProductID], map: "CartItem_productId_fkey")
  user      user    @relation(fields: [userId], references: [id], map: "CartItem_userId_fkey")

  @@unique([userId, productId], map: "CartItem_userId_productId_key")
  @@index([productId], map: "CartItem_productId_fkey")
}

model certificate {
  id               Int      @id @default(autoincrement())
  ExpiryDate       DateTime
  FarmerId         Int
  ImageUrl         String
  PlotCode         String
  RegistrationDate DateTime
  Status           String
  Variety          String
  farmer           farmer   @relation(fields: [FarmerId], references: [id], map: "Certificate_FarmerId_fkey")

  @@index([FarmerId], map: "Certificate_FarmerId_fkey")
}

model farmer {
  id          Int           @id @default(autoincrement())
  userId      Int
  location    String
  certificate certificate[]
  user        user          @relation(fields: [userId], references: [id], map: "Farmer_userId_fkey")

  @@index([userId], map: "Farmer_userId_fkey")
}

model order {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  quantity    Int
  totalPrice  Float
  addressText String
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  product     product  @relation(fields: [productId], references: [ProductID], map: "Order_productId_fkey")
  user        user     @relation(fields: [userId], references: [id], map: "Order_userId_fkey")

  @@index([productId], map: "Order_productId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model product {
  ProductID   Int        @id @unique(map: "ProductID") @default(autoincrement())
  ProductName String     @db.VarChar(11)
  ProductType String     @db.VarChar(11)
  Description String?    @db.VarChar(200)
  Price       Int        @db.SmallInt
  Amount      Int        @db.MediumInt
  ProductPic  Bytes?     @db.Blob
  DateCreated DateTime   @default(now()) @db.Timestamp(0)
  PlotCode    String
  Status      String
  cartitem    cartitem[]
  order       order[]
}

model province {
  id           Int       @id @default(autoincrement())
  name_th      String
  name_en      String
  geography_id Int
  created_at   DateTime  @default(now())
  updated_at   DateTime
  deleted_at   DateTime? @default(now())
  address      address[]
  amphoe       amphoe[]
}

model tambon {
  id         Int       @id @default(autoincrement())
  name_th    String
  name_en    String
  amphoeId   Int
  zip_code   Int
  created_at DateTime  @default(now())
  updated_at DateTime
  deleted_at DateTime? @default(now())
  address    address[]
  amphoe     amphoe    @relation(fields: [amphoeId], references: [id], map: "Tambon_amphoeId_fkey")

  @@index([amphoeId], map: "Tambon_amphoeId_fkey")
}

model user {
  id        Int        @id @default(autoincrement())
  email     String     @unique(map: "User_email_key")
  name      String
  role      user_role  @default(customer)
  password  String
  createdAt DateTime   @default(now())
  phone     String     @unique(map: "User_phone_key")
  updatedAt DateTime
  address   address[]
  cartitem  cartitem[]
  farmer    farmer[]
  order     order[]
}

enum user_role {
  customer
  farmer
  admin
}
