generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  ProductID   Int      @id @unique(map: "ProductID") @default(autoincrement())
  farmerId    Int
  plotCode    String
  ProductName String   @db.VarChar(11)
  ProductType String   @db.VarChar(11)
  Description String?  @db.VarChar(200)
  Price       Int      @db.SmallInt
  Amount      Int      @db.MediumInt
  status      String
  ProductPic  Bytes?   @db.Blob
  DateCreated DateTime @default(now()) @db.Timestamp(0)
  cartItems   CartItem[]
  Orders      Order[]
  reviews     RatingReview[]
  
  // Relationships
  farmer      Farmer   @relation(fields: [farmerId], references: [id])
}

model RatingReview {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  rating      Int      @db.TinyInt  // Rating out of 5 (for example)
  review      String?  @db.VarChar(1000) // Optional review text
  createdAt   DateTime @default(now())
  
  // Relationships
  product     Product  @relation(fields: [productId], references: [ProductID])
  user        User     @relation(fields: [userId], references: [id])
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String
  role            Role   @default(customer)
  password        String
  createdAt       DateTime @default(now())
  phone           String   @unique
  updatedAt       DateTime @updatedAt

  cartItems       CartItem[]
  Orders          Order[]
  Addresses       Address[]
  Farmer          Farmer[]
  Reviews         RatingReview[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  userId    Int
  productId Int

  //Relationships
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [ProductID])

  @@unique([userId, productId])
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        Int
  productId     Int
  farmerId      Int
  deliveryId    Int
  quantity      Int
  totalPrice    Float
  addressText   String   //store the address in text form
  status        String   @default("Pending")
  deliveryStatus String  @default("Preparing") // status for the delivery process
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt


  //Relationships
  user          User     @relation(fields: [userId], references: [id])
  product       Product  @relation(fields: [productId], references: [ProductID])
  delivery      Delivery_Order @relation(fields: [deliveryId], references: [id])
  farmer        Farmer    @relation(fields: [farmerId], references: [id])
}

model Delivery_Service{
  id      Int @id @default(autoincrement())
  name    String

  deliveryOrder Delivery_Order[]
}

model Delivery_Order {
  id            Int  @id @default(autoincrement())
  deliveryId    Int
  trackingNum   Int

  order                 Order[]
  deliveryService       Delivery_Service  @relation(fields: [deliveryId], references: [id])

}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  provinceId Int
  amphoeId   Int
  tambonId   Int
  addressLine String
  postalCode  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDefault   Boolean  @default(false)// New field to indicate the default address

  //Relationships
  user       User     @relation(fields: [userId], references: [id])
  province   Province @relation(fields: [provinceId], references: [id])
  amphoe     Amphoe   @relation(fields: [amphoeId], references: [id])
  tambon     Tambon   @relation(fields: [tambonId], references: [id])


}

model Province {
  id       Int       @id @default(autoincrement())
  name_th  String
  name_en  String
  geography_id Int
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?   @default(now())
  amphoes  Amphoe[]
  addresses Address[]
}

model Amphoe {
  id          Int        @id @default(autoincrement())
  name_th     String
  name_en     String
  province_id Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?   @default(now())
  tambons     Tambon[]
  addresses   Address[]

  //Relationships
  province    Province   @relation(fields: [province_id], references: [id])
}

model Tambon {
  id         Int       @id @default(autoincrement())
  name_th    String
  name_en    String
  amphoeId   Int
  zip_code   Int
  addresses  Address[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?   @default(now())

  //Relationships
  amphoe     Amphoe    @relation(fields: [amphoeId], references: [id])
}

enum Role {
  customer
  farmer
  admin
}

model Farmer {
  id             Int          @id @default(autoincrement())
  userId         Int           @unique
  location       String
  farmerName     String        @db.VarChar(100)   // Farmer's full name
  contactLine    String        @db.VarChar(15)    // Farmer's contact
  certificates   Certificate[]
  products       Product[]
  orders         Order[]

  //Relationships
  user           User           @relation(fields: [userId], references: [id])

}

model Certificate {
  id              Int      @id @default(autoincrement())
  variety         String
  plotCode        String
  registrationDate DateTime
  expiryDate      DateTime
  status          String
  imageUrl        String
  farmerId        Int

  //Relationships
  farmer          Farmer   @relation(fields: [farmerId], references: [id])
}

