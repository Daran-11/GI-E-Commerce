generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  ProductID   Int      @id @unique(map: "ProductID") @default(autoincrement())
  ProductName String   @db.VarChar(11)
  ProductType String   @db.VarChar(11)
  Description String?  @db.VarChar(200)
  Price       Int      @db.SmallInt
  Amount      Int      @db.MediumInt
  ProductPic  Bytes?   @db.Blob
  DateCreated DateTime @default(now()) @db.Timestamp(0)
  cartItems   CartItem[]
  Orders      Order[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      Role   @default(customer)
  password  String
  createdAt DateTime @default(now())
  phone     String   @unique
  updatedAt DateTime @updatedAt
  cartItems CartItem[]
  Orders    Order[]
  Addresses Address[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [ProductID])

  @@unique([userId, productId])
}

model Order {
  id            Int      @id @default(autoincrement())
  userId        Int
  productId     Int
  quantity      Int
  totalPrice    Float
  addressId     Int
  status        String   @default("Pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id])
  product       Product  @relation(fields: [productId], references: [ProductID])
  address       Address  @relation(fields: [addressId], references: [id])
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  provinceId Int
  amphoeId   Int
  tambonId   Int
  addressLine String
  postalCode  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  province   Province @relation(fields: [provinceId], references: [id])
  amphoe     Amphoe   @relation(fields: [amphoeId], references: [id])
  tambon     Tambon   @relation(fields: [tambonId], references: [id])
  orders     Order[]
  
  isDefault   Boolean  @default(false)// New field to indicate the default address

}

model Province {
  id       Int       @id @default(autoincrement())
  name_th  String
  name_en  String
  geography_id Int
  created_at DateTime @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?   @default(now())
  amphoes  Amphoe[]
  addresses Address[]
}

model Amphoe {
  id          Int        @id @default(autoincrement())
  name_th     String
  name_en     String
  province_id Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?   @default(now())
  tambons     Tambon[]
  addresses   Address[]
  province    Province   @relation(fields: [province_id], references: [id])
}

model Tambon {
  id         Int       @id @default(autoincrement())
  name_th    String
  name_en    String
  amphoeId   Int
  zip_code   Int
  amphoe     Amphoe    @relation(fields: [amphoeId], references: [id])
  addresses  Address[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?   @default(now())
}

enum Role {
  customer
  farmer
  admin
}
