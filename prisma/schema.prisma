generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bank {
  id           Int           @id @default(autoincrement())
  brand        String
  imageUrl     String
  isAvailable  Boolean       @default(true)
  BankAccounts BankAccount[]
}



model BankAccount {
  id            Int     @id @default(autoincrement())
  accountNumber String // หมายเลขบัญชีธนาคาร
  accountName   String // ชื่อเจ้าของบัญชี
  bankId        Int // ความสัมพันธ์กับตาราง Bank
  bank          Bank    @relation(fields: [bankId], references: [id])
  userId        Int? // ใช้ถ้าเป็นบัญชีของ user
  farmerId      Int? // ใช้ถ้าเป็นบัญชีของ farmer
  user          User?   @relation(fields: [userId], references: [id])
  farmer        Farmer? @relation(fields: [farmerId], references: [id])
  recipientId   String? // เก็บ Omise Recipient ID
  isDefault     Boolean @default(false) // ระบุว่าบัญชีนี้เป็นบัญชีหลัก
}

model Product {
  ProductID    Int                  @id @unique(map: "ProductID") @default(autoincrement())
  farmerId     Int
  ProductName  String               @db.VarChar(11)
  ProductType  String               @db.VarChar(11)
  Description  String              @db.VarChar(200)
  Details      String?
  Price        Int                  @db.SmallInt // ราคาขาย
  Cost         Int                  @db.SmallInt // ราคาต้นทุน
  Amount       Int                  @db.MediumInt
  status       String
  images       ProductImage[]       @relation("ProductImages")
  isDeleted    Boolean              @default(false) // New field to indicate the product is deleted
  soldCount    Int                  @default(0)
  DateCreated  DateTime             @default(now()) @db.Timestamp(0)
  HarvestedAt  DateTime
  cartItems    CartItem[]
  OrderItems   OrderItem[]
  reviews      RatingReview[]
  certificates ProductCertificate[] // The relationship is through the join table
  farmer       Farmer               @relation(fields: [farmerId], references: [id])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  imageUrl  String  @db.VarChar(255)
  product   Product @relation("ProductImages", fields: [productId], references: [ProductID])
  productId Int
}

model RatingReview {
  id        Int      @id @default(autoincrement())
  userId    Int
  orderId   Int
  productId Int
  rating    Int      @db.TinyInt // Rating out of 5 (for example)
  review    String?  @db.VarChar(1000) // Optional review text
  createdAt DateTime @default(now())

  // Relationships
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [ProductID])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, orderId]) // Define composite unique constraint here
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  role      Role     @default(customer)
  password  String
  createdAt DateTime @default(now())
  phone     String   @unique
  updatedAt DateTime @updatedAt

  cartItems    CartItem[]
  Orders       Order[]
  Addresses    Address[]
  Farmer       Farmer[]
  Reviews      RatingReview[]
  BankAccounts BankAccount[]

  History History[]
}

model CartItem {
  id        Int @id @default(autoincrement())
  quantity  Int
  userId    Int
  productId Int

  //Relationships
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [ProductID])

  @@unique([userId, productId])
}

model Order {
  id             Int            @id @default(autoincrement())
  userId         Int
  deliveryId     Int? // Reference to Delivery_Detail (optional)
  farmerId       Int
  totalPrice     Float
  addressText    String // Stores the delivery address in text form
  status         orderStatus    @default(Pending)
  deliveryStatus DeliveryStatus @default(Preparing)
  paymentStatus  paymentStatus  @default(Pending)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  farmer     Farmer           @relation(fields: [farmerId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
  reviews    RatingReview[] // Relation to RatingReview table
  delivery   Delivery_Detail?
  orderItems OrderItem[] // Relation to OrderItem table (1-to-many)

  History History[]
}

model OrderItem {
  id        Int   @id @default(autoincrement())
  orderId   Int
  productId Int
  farmerId  Int
  quantity  Int
  price     Float // Store the price for this specific product

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [ProductID])
  farmer  Farmer  @relation(fields: [farmerId], references: [id])
}

enum orderStatus {
  Pending
  Processing
  Completed
}

enum paymentStatus {
  Pending
  Completed
  Failed
  Refunded
  Processing
}

enum DeliveryStatus {
  Preparing
  Shipped
  OutForDelivery
  Delivered

  Canceled
  Returned
  FailedDelivery
  AwaitingPickup
  RefundProcessed
}

model Delivery_Service {
  id          Int               @id @default(autoincrement())
  name        String
  isAvailable Boolean           @default(true)
  deliveries  Delivery_Detail[] // One-to-many relationship with Delivery_Detail
}

model Delivery_Detail {
  id          Int    @id @default(autoincrement())
  serviceId   Int
  orderId     Int    @unique // Associate with a specific order and must be unique
  trackingNum String // Tracking number for this specific order

  order           Order            @relation(fields: [orderId], references: [id]) // One-to-one relation with Order
  deliveryService Delivery_Service @relation(fields: [serviceId], references: [id]) // Relation with Delivery_Service
}

model Address {
  id          Int      @id @default(autoincrement())
  userId      Int
  provinceId  Int
  amphoeId    Int
  tambonId    Int
  addressLine String
  postalCode  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  province Province @relation(fields: [provinceId], references: [id])
  amphoe   Amphoe   @relation(fields: [amphoeId], references: [id])
  tambon   Tambon   @relation(fields: [tambonId], references: [id])

  isDefault Boolean @default(false) // New field to indicate the default address
}

model Province {
  id           Int       @id @default(autoincrement())
  name_th      String
  name_en      String
  geography_id Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime? @default(now())
  amphoes      Amphoe[]
  addresses    Address[]
}

model Amphoe {
  id          Int       @id @default(autoincrement())
  name_th     String
  name_en     String
  province_id Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime? @default(now())
  tambons     Tambon[]
  addresses   Address[]
  province    Province  @relation(fields: [province_id], references: [id])
}

model Tambon {
  id         Int       @id @default(autoincrement())
  name_th    String
  name_en    String
  amphoeId   Int
  zip_code   Int
  amphoe     Amphoe    @relation(fields: [amphoeId], references: [id])
  addresses  Address[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime? @default(now())
}

enum Role {
  customer
  farmer
  admin
  municipal
}

model Farmer {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  farmerName   String?
  address      String
  sub_district String
  district     String
  province     String
  zip_code     String
  phone        String
  contactLine  String        @db.VarChar(15)
  certificates Certificate[]
  products     Product[]
  OrderItems   OrderItem[]
  Orders       Order[]
  BankAccounts BankAccount[]
  //Relationships
  user         User          @relation(fields: [userId], references: [id])

  History History[]
  QR_Code QR_Code[]
}

model QR_Code {
  id                 Int      @id @default(autoincrement())
  Product_ID         String   @unique
  Type               String
  Variety            String
  ProductionQuantity Int
  Standard           Json // เก็บข้อมูลมาตรฐานเป็น JSON
  Address            String
  Phone              String
  farmerName         String
  farmerId           Int
  Latitude           Float?   // Marked as optional
  Longitude          Float?   // Marked as optional
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  farmer             Farmer   @relation(fields: [farmerId], references: [id])
}

model manage_farmer {
  id                Int                  @id @default(autoincrement())
  farmerNameApprove String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  certificates      Certificate_farmer[]
}

model Certificate_farmer {
  id                Int           @id @default(autoincrement())
  type              String
  variety           String
  standardName      String
  certificateNumber String
  approvalDate      DateTime
  Users             manage_farmer @relation(fields: [UsersId], references: [id], onDelete: Cascade)
  UsersId           Int
}

model Standard {
  id                Int      @id @default(autoincrement())
  name              String
  certificationInfo String?
  logoUrl           String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Certificate {
  id                 Int                  @id @default(autoincrement())
  type               String
  variety            String
  latitude           Float
  longitude          Float
  productionQuantity Int
  registrationDate   DateTime
  expiryDate         DateTime
  status             String               @default("รอตรวจสอบใบรับรอง")
  farmerId           Int
  municipalComment   String?
  standards          Json // เก็บข้อมูลมาตรฐานเป็น JSON
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  productId          Int?
  Users              Farmer               @relation(fields: [farmerId], references: [id])
  products           ProductCertificate[]
}

model ProductCertificate {
  productId     Int
  certificateId Int
  product       Product     @relation(fields: [productId], references: [ProductID])
  certificate   Certificate @relation(fields: [certificateId], references: [id])

  @@id([productId, certificateId])
}

model History {
  id             Int            @id @default(autoincrement())
  orderId        Int // Reference to the completed Order
  userId         Int // Reference to the user who placed the order
  farmerId       Int
  totalPrice     Float
  status         orderStatus
  paymentStatus  paymentStatus
  deliveryStatus DeliveryStatus
  completedAt    DateTime       @default(now()) // The time when the order was completed

  // Relations
  order  Order  @relation(fields: [orderId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  farmer Farmer @relation(fields: [farmerId], references: [id])

  @@index([orderId, userId])
}
model ManageType {
  id        Int       @id @default(autoincrement())
  type      String    // ชนิด
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  varieties Variety[] // ความสัมพันธ์แบบ one-to-many กับสายพันธุ์

  @@map("manage_type")
}

model Variety {
  id          Int        @id @default(autoincrement())
  name        String     // ชื่อสายพันธุ์
  typeId      Int        // Foreign key ไปยัง ManageType
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  manageType  ManageType @relation(fields: [typeId], references: [id], onDelete: Cascade)

  @@index([typeId])
  @@map("varieties")
}