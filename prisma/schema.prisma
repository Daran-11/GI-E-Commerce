generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Bank {
  id         Int    @id @default(autoincrement())
  brand      String
  imageUrl   String
  isAvailable Boolean @default(true)
  BankAccounts BankAccount[]
}


model BankAccount {
  id            Int       @id @default(autoincrement())
  accountNumber String    // หมายเลขบัญชีธนาคาร
  accountName   String    // ชื่อเจ้าของบัญชี
  bankId        Int       // ความสัมพันธ์กับตาราง Bank
  bank          Bank      @relation(fields: [bankId], references: [id])
  userId        Int?      // ใช้ถ้าเป็นบัญชีของ user
  farmerId      Int?      // ใช้ถ้าเป็นบัญชีของ farmer
  user          User?     @relation(fields: [userId], references: [id])
  farmer        Farmer?   @relation(fields: [farmerId], references: [id])
  recipientId   String?   // เก็บ Omise Recipient ID
  isDefault     Boolean   @default(false) // ระบุว่าบัญชีนี้เป็นบัญชีหลัก
}

model Product {
  ProductID   Int            @id @unique(map: "ProductID") @default(autoincrement())
  farmerId    Int
  plotCode    String
  ProductName String          @db.VarChar(11)
  ProductType String          @db.VarChar(11)
  Description String?         @db.VarChar(200)
  Price       Int             @db.SmallInt // ราคาขาย
  Cost        Int             @db.SmallInt // ราคาต้นทุน
  Amount      Int             @db.MediumInt
  status      String
  images      ProductImage[]  @relation("ProductImages")
  isDeleted   Boolean         @default(false) // New field to indicate the product is deleted
  soldCount   Int             @default(0)
  DateCreated DateTime        @default(now()) @db.Timestamp(0)
  cartItems   CartItem[]
  OrderItems  OrderItem[]
  reviews     RatingReview[]
  farmer      Farmer          @relation(fields: [farmerId], references: [id])
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  imageUrl  String    @db.VarChar(255)
  product   Product   @relation("ProductImages", fields: [productId], references: [ProductID])
  productId Int
}


model RatingReview {
  id          Int      @id @default(autoincrement())
  userId      Int
  productId   Int
  rating      Int      @db.TinyInt  // Rating out of 5 (for example)
  review      String?  @db.VarChar(1000) // Optional review text
  createdAt   DateTime @default(now())
  
  // Relationships
  product     Product  @relation(fields: [productId], references: [ProductID])
  user        User     @relation(fields: [userId], references: [id])
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String
  role            Role   @default(customer)
  password        String
  createdAt       DateTime @default(now())
  phone           String   @unique
  updatedAt       DateTime @updatedAt

  cartItems       CartItem[]
  Orders          Order[]
  Addresses       Address[]
  Farmer          Farmer[]
  Reviews         RatingReview[]
  BankAccounts    BankAccount[] 

  History History[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  userId    Int
  productId Int

  //Relationships
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [ProductID])

  @@unique([userId, productId])
}

model Order {
  id               Int              @id @default(autoincrement())
  userId           Int
  deliveryId       Int?
  farmerId         Int
  totalPrice       Float
  addressText      String           // Stores the delivery address in text form
  status           orderStatus      @default(Pending)
  deliveryStatus   DeliveryStatus   @default(Preparing) // Delivery process status
  paymentStatus    paymentStatus    @default(Pending)   // New field for tracking payment status
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt


  farmer           Farmer           @relation(fields: [farmerId], references: [id]) // Farmer relation
  user             User             @relation(fields: [userId], references: [id])
  delivery         Delivery_Detail? @relation(fields: [deliveryId], references: [id])
  orderItems       OrderItem[]      // Relation to OrderItem table (1-to-many)

  History History[]
}

model OrderItem {
  id            Int      @id @default(autoincrement())
  orderId       Int
  productId     Int
  farmerId      Int
  quantity      Int
  price         Float // Store the price for this specific product

  order         Order   @relation(fields: [orderId], references: [id])
  product       Product @relation(fields: [productId], references: [ProductID])
  farmer        Farmer  @relation(fields: [farmerId], references: [id])
}


enum orderStatus {
  Pending
  Completed
}

enum paymentStatus {
  Pending
  Completed
  Failed
  Refunded
  Processing
}

enum DeliveryStatus {
  Preparing
  Shipped
  OutForDelivery
  Delivered

  Canceled
  Returned
  FailedDelivery
  AwaitingPickup
  RefundProcessed
}




model Delivery_Service{
  id      Int @id @default(autoincrement())
  name    String

  deliveryOrder Delivery_Detail[]
}

model Delivery_Detail {
  id            Int  @id @default(autoincrement())
  deliveryId    Int 
  trackingNum   String    

  order                 Order[]
  deliveryService       Delivery_Service  @relation(fields: [deliveryId], references: [id])

}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  provinceId Int
  amphoeId   Int
  tambonId   Int
  addressLine String
  postalCode  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  province   Province @relation(fields: [provinceId], references: [id])
  amphoe     Amphoe   @relation(fields: [amphoeId], references: [id])
  tambon     Tambon   @relation(fields: [tambonId], references: [id])
  
  isDefault   Boolean  @default(false)// New field to indicate the default address

}

model Province {
  id            Int       @id @default(autoincrement())
  name_th       String
  name_en       String
  geography_id  Int
  created_at    DateTime @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?   @default(now())
  amphoes       Amphoe[]
  addresses     Address[]
}

model Amphoe {
  id          Int        @id @default(autoincrement())
  name_th     String
  name_en     String
  province_id Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?   @default(now())
  tambons     Tambon[]
  addresses   Address[]
  province    Province   @relation(fields: [province_id], references: [id])
}

model Tambon {
  id         Int       @id @default(autoincrement())
  name_th    String
  name_en    String
  amphoeId   Int
  zip_code   Int
  amphoe     Amphoe    @relation(fields: [amphoeId], references: [id])
  addresses  Address[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?   @default(now())
}

enum Role {
  customer
  farmer
  admin
}

model Farmer {
  id             Int          @id @default(autoincrement())
  userId         Int           @unique
  location       String
  farmerName     String        @db.VarChar(100)   // Farmer's full name
  contactLine    String        @db.VarChar(15)    // Farmer's contact
  certificates   Certificate[]
  products       Product[]
  OrderItems     OrderItem[]
  Orders          Order[]
  BankAccounts    BankAccount[]
  
  
  //Relationships
  user           User           @relation(fields: [userId], references: [id])


  History History[]
}

model Certificate {
  id              Int      @id @default(autoincrement())
  variety         String
  plotCode        String
  registrationDate DateTime
  expiryDate      DateTime
  status          String
  imageUrl        String
  farmerId        Int
  farmer          Farmer   @relation(fields: [farmerId], references: [id])
}

model History {
  id             Int      @id @default(autoincrement())
  orderId        Int      // Reference to the completed Order
  userId         Int      // Reference to the user who placed the order
  farmerId       Int
  totalPrice     Float
  status         orderStatus
  paymentStatus  paymentStatus
  deliveryStatus DeliveryStatus
  completedAt    DateTime @default(now()) // The time when the order was completed

  // Relations
  order          Order    @relation(fields: [orderId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  farmer         Farmer   @relation(fields: [farmerId], references: [id])

  @@index([orderId, userId])
}
